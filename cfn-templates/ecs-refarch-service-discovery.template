{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Template00 - Creates environment needed for the ECS Reference Architecture: Service Discovery",
    "Metadata" : {
        "Maintainer" : { "Description" : "Chad Schmutzer <schmutze@amazon.com>" },
        "AWS::CloudFormation::Interface" : {
            "ParameterGroups" : [
                {
                    "Label" : { "default" : "SSH Access" },
                    "Parameters" : [ "KeyName" ]
                },
                {
                    "Label" : { "default" : "ECS Cluster" },
                    "Parameters" : [ "ECSInstanceType", "ECSClusterInstanceCount" ]
                },
                {
                    "Label" : { "default" : "DNS" },
                    "Parameters" : [ "PrivateZone" ]
                },
                {
                    "Label" : { "default" : "Weather App" },
                    "Parameters" : [ "WeatherAppServiceName" , "WeatherAppPort" , "WeatherApiKey" ]
                },
                {
                    "Label" : { "default" : "Stocks App" },
                    "Parameters" : [ "StocksAppServiceName" , "StocksAppPort" ]
                },
                {
                    "Label" : { "default" : "Portal App" },
                    "Parameters" : [ "PortalAppServiceName" , "PortalAppPort" ]
                }
            ],
            "ParameterLabels" : {
                "KeyName" : { "default" : "Key Name" },
                "ECSInstanceType" : { "default" : "ECS Instance Type" },
                "ECSClusterInstanceCount" : { "default" : "ECS Cluster Instance Count" },
                "PrivateZone" : { "default" : "Private Hosted Zone Name" },
                "WeatherAppServiceName" : { "default" : "Weather App Service Name" },
                "WeatherAppPort" : { "default" : "Weather App Port" },
                "WeatherApiKey" : { "default" : "Weather API Key" },
                "StocksAppServiceName" : { "default" : "Stocks App Service Name" },
                "StocksAppPort" : { "default" : "Stocks App Port" },
                "PortalAppServiceName" : { "default" : "Portal App Service Name" },
                "PortalAppPort" : { "default" : "Portal App Port" }
            }
        }
    },
    "Parameters" : {
        "KeyName" : {
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "Description" : "Name of an existing EC2 KeyPair"
        },
        "ECSInstanceType" : {
            "Type" : "String",
            "Description" : "ECS instance type",
            "Default" : "t2.micro",
            "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium" ],
            "ConstraintDescription" : "Must be t2.micro, t2.small, t2.medium"
        },
        "ECSClusterInstanceCount" : {
            "Type" : "Number",
            "Description" : "The number of EC2 instances in the ECS Cluster",
            "Default" : "2",
            "AllowedValues" : [ "2", "3", "4" ]
        },
        "PortalAppServiceName" : {
            "Type" : "String",
            "Description" : "The name of the Portal app ECS service",
            "Default" : "portalapp",
            "AllowedValues" : [ "portalapp" ]
        },
        "PortalAppPort" : {
            "Type" : "Number",
            "Description" : "The port the Portal app will run on",
            "Default" : "80",
            "AllowedValues" : [ "80" ]
        },
        "WeatherAppServiceName" : {
            "Type" : "String",
            "Description" : "The name of the Weather app ECS service",
            "Default" : "weatherapp",
            "AllowedValues" : [ "weatherapp" ]
        },
        "WeatherAppPort" : {
            "Type" : "Number",
            "Description" : "The port the Weather app will run on",
            "Default" : "8080",
            "AllowedValues" : [ "8080" ]
        },
        "StocksAppServiceName" : {
            "Type" : "String",
            "Description" : "The name of the Stocks app ECS service",
            "Default" : "stocksapp",
            "AllowedValues" : [ "stocksapp" ]
        },
        "StocksAppPort" : {
            "Type" : "Number",
            "Description" : "The port the Stocks app will run on",
            "Default" : "9090",
            "AllowedValues" : [ "9090" ]
        },
        "WeatherApiKey" : {
            "Type" : "String",
            "Description" : "The OpenWeatherMap API Key"
        },
        "PrivateZone" : {
            "Type" : "String",
            "Description" : "Private hosted zone name",
            "Default" : "ecs.internal",
            "AllowedValues" : [ "ecs.internal" ]
        }
    },
    "Mappings" : {
        "AmazonLinuxAMI" : {
            "us-east-1" : {
                "AMI" : "ami-43043329"
            },
            "us-west-1" : {
                "AMI" : "ami-a77b0ac7"
            },
            "us-west-2" : {
                "AMI" : "ami-02a24162"
            },
            "eu-west-1" : {
                "AMI" : "ami-76e95b05"
            },
            "eu-central-1" : {
                "AMI" : "ami-96b6adfa"
            },
            "ap-northeast-1" : {
                "AMI" : "ami-18d8de76"
            },
            "ap-southeast-1" : {
                "AMI" : "ami-9f60aefc"
            },
            "ap-southeast-2" : {
                "AMI" : "ami-75a38416"
            }
        },
        "VPCLayout" : {
            "VPC" : { "CIDR" : "10.5.0.0/16" },
            "PublicSubnet1Config" : { "CIDR" : "10.5.10.0/24" },
            "PublicSubnet2Config" : { "CIDR" : "10.5.15.0/24" }    
        }
    },
    "Resources" : {     
        "LoadBalancerPortalApp" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets" : [ 
                    { "Ref" : "PublicSubnet1" },
                    { "Ref" : "PublicSubnet2" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : { "Ref" : "PortalAppPort" },
                        "Protocol" : "HTTP"
                    }
                ],
                "HealthCheck" : {
                    "Target" : "HTTP:80/",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "5",
                    "Timeout" : "4"
                },
                "CrossZone" : "true",
                "SecurityGroups" : [ { "Ref" : "LoadBalancerPortalAppSecurityGroup" } ],
                "ConnectionDrainingPolicy" : {
                    "Enabled" : "true",
                    "Timeout" : "60"
                },
                "Scheme" : "internet-facing"
            }
        },
        "LoadBalancerWeatherApp" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets" : [ 
                    { "Ref" : "PublicSubnet1" },
                    { "Ref" : "PublicSubnet2" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : { "Ref" : "WeatherAppPort" },
                        "Protocol" : "TCP"
                    }
                ],
                "HealthCheck" : {
                    "Target" : { "Fn::Join" : [ "", [ "HTTP:", { "Ref" : "WeatherAppPort" }, "/health" ] ] },
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "5",
                    "Timeout" : "4"
                },
                "CrossZone" : "true",
                "SecurityGroups" : [ { "Ref" : "LoadBalancerWeatherAppSecurityGroup" } ],
                "ConnectionDrainingPolicy" : {
                    "Enabled" : "true",
                    "Timeout" : "60"
                },
                "Scheme" : "internal"
            }
        },
        "LoadBalancerStocksApp" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets" : [ 
                    { "Ref" : "PublicSubnet1" },
                    { "Ref" : "PublicSubnet2" }
                ],
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : { "Ref" : "StocksAppPort" },
                        "Protocol" : "TCP"
                    }
                ],
                "HealthCheck" : {
                    "Target" : { "Fn::Join" : [ "", [ "HTTP:", { "Ref" : "StocksAppPort" }, "/health" ] ] },
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "5",
                    "Timeout" : "4"
                },
                "CrossZone" : "true",
                "SecurityGroups" : [ { "Ref" : "LoadBalancerStocksAppSecurityGroup" } ],
                "ConnectionDrainingPolicy" : {
                    "Enabled" : "true",
                    "Timeout" : "60"
                },
                "Scheme" : "internal"
            }
        },
        "ECSInstanceAutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : [
                    { "Fn::GetAtt" : [ "PublicSubnet1", "AvailabilityZone" ] },
                    { "Fn::GetAtt" : [ "PublicSubnet2", "AvailabilityZone" ] }
                ],
                "VPCZoneIdentifier" : [
                    { "Ref" : "PublicSubnet1" },
                    { "Ref" : "PublicSubnet2" }
                ],
                "LaunchConfigurationName" : { "Ref" : "ECSInstanceLaunchConfiguration" },
                "MinSize" : { "Ref" : "ECSClusterInstanceCount" },
                "MaxSize" : { "Ref" : "ECSClusterInstanceCount" },
                "DesiredCapacity" : { "Ref" : "ECSClusterInstanceCount" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" },
                    { "Key" : "Name", "Value" : "ECS refarch instance", "PropagateAtLaunch" : "true" }
                ]
            }
        },
        "ECSInstanceLaunchConfiguration" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : { "ConfigCluster" : [ "Install" ] },
                    "Install" : {
                        "files" : {
                            "/home/ec2-user/.aws/config" : {
                                "mode" : "000755",
                                "owner" : "ec2-user",
                                "group" : "root",
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[default]\n",
                                            "region = ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "/etc/ecs/ecs.config" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "ECS_CLUSTER=",
                                            {
                                                "Ref" : "ECSCluster"
                                            }
                                        ]
                                    ]
                                },
                                "mode" : "000755",
                                "owner" : "root",
                                "group" : "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "AmazonLinuxAMI", { "Ref" : "AWS::Region" }, "AMI" ] },
                "InstanceType" : { "Ref" : "ECSInstanceType" },
                "AssociatePublicIpAddress" : "true",
                "IamInstanceProfile" : { "Ref" : "ECSInstanceProfile" },
                "SecurityGroups" : [ { "Ref" : "ECSInstanceSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "yum install -y aws-cfn-bootstrap git aws-cli\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource ECSInstanceLaunchConfiguration ",
                                "         --configsets ConfigCluster ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource ECSInstanceAutoScalingGroup ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "CidrBlock" :  { "Fn::FindInMap" : [ "VPCLayout", "VPC", "CIDR" ]},
                "Tags" : [
                    {
                        "Key" : "VPC",
                        "Value" : "ECS"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "ECS refarch service discovery"
                    }
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "DependsOn" : "VPC"
        },
        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : [
                "VPC",
                "InternetGateway"
            ],
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "InternetGatewayId" : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "PublicSubnet1" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VPCLayout", "PublicSubnet1Config", "CIDR" ]},
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        "0",
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public Subnet 1"
                    }
                ]
            }
        },
        "PublicSubnet2" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VPCLayout", "PublicSubnet2Config", "CIDR" ]},
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        "1",
                        {
                            "Fn::GetAZs" : ""
                        }
                    ]
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public Subnet 2"
                    }
                ]
            }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : [
                "VPC",
                "AttachGateway"
            ],
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public"
                    }
                ]
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : [
                "PublicRouteTable",
                "AttachGateway"
            ],
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : [
                "PublicRouteTable",
                "PublicSubnet1",
                "AttachGateway"
            ],
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "PublicSubnet1"
                },
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : [
                "PublicRouteTable",
                "PublicSubnet2"
            ],
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "PublicSubnet2"
                },
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                }
            }
        },
        "LoadBalancerPortalAppSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "LoadBalancer Internet-facing Security Group",
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : { "Ref" : "PortalAppPort" },
                        "ToPort" : { "Ref" : "PortalAppPort" },
                        "CidrIp" : "0.0.0.0/0"
                    }
                ],
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "LoadBalancerPortalAppSecurityGroup"
                    }
                ]
            }
        },
        "LoadBalancerWeatherAppSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "LoadBalancer Weather app Security Group",
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "LoadBalancerWeatherAppSecurityGroup"
                    }
                ]
            }
        },
        "LoadBalancerWeatherAppSecurityGroupIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "ECSInstanceSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "LoadBalancerWeatherAppSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "80",
                "ToPort" : "80",
                "SourceSecurityGroupId" : { "Ref" : "ECSInstanceSecurityGroup" }
            }
        },
        "LoadBalancerStocksAppSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "LoadBalancer Stocks app Security Group",
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "LoadBalancerStocksAppSecurityGroup"
                    }
                ]
            }
        },
        "LoadBalancerStocksAppSecurityGroupIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "ECSInstanceSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "LoadBalancerStocksAppSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "80",
                "ToPort" : "80",
                "SourceSecurityGroupId" : { "Ref" : "ECSInstanceSecurityGroup" }
            }
        },
        "ECSInstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "GroupDescription" : "Security Group for ECSInstance",
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "ECSInstanceSecurityGroup"
                    }
                ]
            }
        },
        "ECSInstanceSecurityGroup22" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "LoadBalancerPortalAppSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "ECSInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "22",
                "ToPort" : "22",
                "CidrIp" : "0.0.0.0/0"
            }
        },
        "ECSInstanceSecurityGroupPortalApp" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "LoadBalancerPortalAppSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "ECSInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : { "Ref" : "PortalAppPort" },
                "ToPort" : { "Ref" : "PortalAppPort" },
                "SourceSecurityGroupId" : { "Ref" : "LoadBalancerPortalAppSecurityGroup" }
            }
        },
        "ECSInstanceSecurityGroupWeatherApp" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "LoadBalancerWeatherAppSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "ECSInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : { "Ref" : "WeatherAppPort" },
                "ToPort" : { "Ref" : "WeatherAppPort" },
                "SourceSecurityGroupId" : { "Ref" : "LoadBalancerWeatherAppSecurityGroup" }
            }
        },
        "ECSInstanceSecurityGroupStocksApp" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "DependsOn" : "LoadBalancerStocksAppSecurityGroup",
            "Properties" : {
                "GroupId" : { "Ref" : "ECSInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : { "Ref" : "StocksAppPort" },
                "ToPort" : { "Ref" : "StocksAppPort" },
                "SourceSecurityGroupId" : { "Ref" : "LoadBalancerStocksAppSecurityGroup" }
            }
        },
        "ECSInstanceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action" : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path" : "/",
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ]
            }
        },
        "ECSInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "DependsOn" : "ECSInstanceRole",
            "Properties" : {
                "Path" : "/",
                "Roles" : [
                    {
                        "Ref" : "ECSInstanceRole"
                    }
                ]
            }
        },
        "ECSServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action" : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path" : "/",
                "ManagedPolicyArns" : [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
                ]
            }
        },
        "LambdaServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "DependsOn" : "DNS",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action" : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path" : "/",
                "Policies" : [ {
                    "PolicyName" : "CloudWatchEventsLambdaRoute53",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Resource" : "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "route53:ChangeResourceRecordSets"
                                ],
                                "Resource" : { "Fn::Join" : [ "", [ "arn:aws:route53:::hostedzone/", { "Ref" : "DNS" } ] ] }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "elasticloadbalancing:DescribeLoadBalancers"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }]
            }
        },
        "ECSCluster" : {
            "Type" : "AWS::ECS::Cluster"
        },
        "ECSTaskDefinitionPortalApp" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ContainerDefinitions" : [
                    {
                        "Name" : "PortalApp",
                        "Image" : "681800210136.dkr.ecr.us-east-1.amazonaws.com/portal:latest",
                        "Memory" : "100",
                        "Cpu" : "100",
                        "PortMappings" : [
                            {
                                "HostPort" : { "Ref" : "PortalAppPort" },
                                "ContainerPort" : "80"
                            }
                        ],
                        "Environment" : [
                            {
                                "Name" : "WEATHERAPPENDPOINT",
                                "Value" : { "Fn::Join" : [ "", [
                                    { "Ref" : "WeatherAppServiceName" },
                                    ".",
                                    { "Ref" : "PrivateZone" },
                                    ":80"
                                ] ] }
                            },
                            {
                                "Name" : "STOCKSAPPENDPOINT",
                                "Value" : { "Fn::Join" : [ "", [
                                    { "Ref" : "StocksAppServiceName" },
                                    ".",
                                    { "Ref" : "PrivateZone" },
                                    ":80"
                                ] ] }
                            }
                        ]
                    }
                ]
            }
        },
        "ECSTaskDefinitionWeatherApp" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ContainerDefinitions" : [
                    {
                        "Name" : "WeatherApp",
                        "Image" : "681800210136.dkr.ecr.us-east-1.amazonaws.com/weather:latest",
                        "Memory" : "100",
                        "Cpu" : "100",
                        "PortMappings" : [
                            {
                                "HostPort" : { "Ref" : "WeatherAppPort" },
                                "ContainerPort" : "80"
                            }
                        ],
                        "Environment" : [
                            {
                                "Name" : "API_KEY",
                                "Value" : { "Ref" : "WeatherApiKey" }
                            }
                        ]
                    }
                ]
            }
        },
        "ECSTaskDefinitionStocksApp" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ContainerDefinitions" : [
                    {
                        "Name" : "StocksApp",
                        "Image" : "681800210136.dkr.ecr.us-east-1.amazonaws.com/stocks:latest",
                        "Memory" : "100",
                        "Cpu" : "100",
                        "PortMappings" : [
                            {
                                "HostPort" : { "Ref" : "StocksAppPort" },
                                "ContainerPort" : "80"
                            }
                        ]
                    }
                ]
            }
        },
        "DNS" : {
            "Type" : "AWS::Route53::HostedZone",
            "DependsOn" : "VPC",
            "Properties" : {
                "HostedZoneConfig" : {
                    "Comment" : "Private hosted zone for ECS Reference Architecture: Service Discovery"
                },
                "Name" : { "Ref" : "PrivateZone" },
                "VPCs" : [
                    {
                        "VPCId" : { "Ref" : "VPC" },
                        "VPCRegion" : { "Ref" : "AWS::Region" }
                    }
                ]
            }
        }
    },
    "Outputs" : {
        "LoadBalancerPortalAppUrl" : {
            "Description" : "Public hostname of the Portal app load balancer",
            "Value" : {
                "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancerPortalApp", "DNSName" ] } ] ]
            }
        },
        "LoadBalancerPortalApp" : {
            "Description" : "Name of the Portal app load balancer",
            "Value" : {
                "Ref" : "LoadBalancerPortalApp"
            }
        },
        "LoadBalancerWeatherApp" : {
            "Description" : "Name of the Weather app load balancer",
            "Value" : {
                "Ref" : "LoadBalancerWeatherApp"
            }
        },
        "LoadBalancerStocksApp" : {
            "Description" : "Name of the Stocks app load balancer",
            "Value" : {
                "Ref" : "LoadBalancerStocksApp"
            }
        },
        "ECSClusterName" : {
            "Description" : "Name of the ECS cluster",
            "Value" : {
                "Ref" : "ECSCluster"
            }
        },
        "StocksAppTaskDefinition" : {
            "Description" : "The task definition for the stocks app",
            "Value" : {
                "Ref" : "ECSTaskDefinitionStocksApp"
            }
        },
        "WeatherAppTaskDefinition" : {
            "Description" : "The task definition for the weather app",
            "Value" : {
                "Ref" : "ECSTaskDefinitionWeatherApp"
            }
        },
        "PortalAppTaskDefinition" : {
            "Description" : "The task definition for the portal app",
            "Value" : {
                "Ref" : "ECSTaskDefinitionPortalApp"
            }
        },
        "Route53PrivateHostedZoneID" : {
            "Description" : "ID of the Route53 private hosted zone",
            "Value" : {
                "Ref" : "DNS"
            }
        },
        "ECSServiceRole" : {
            "Description" : "Name of the ECS service role",
            "Value" : {
                "Ref" : "ECSServiceRole"
            }
        },
        "LambdaServiceRole" : {
            "Description" : "Name of the Lambda service role",
            "Value" : {
                "Ref" : "LambdaServiceRole"
            }
        }
    }
}
